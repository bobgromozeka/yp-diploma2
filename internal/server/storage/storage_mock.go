// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage.go

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStoragesFactory is a mock of StoragesFactory interface.
type MockStoragesFactory struct {
	ctrl     *gomock.Controller
	recorder *MockStoragesFactoryMockRecorder
}

// MockStoragesFactoryMockRecorder is the mock recorder for MockStoragesFactory.
type MockStoragesFactoryMockRecorder struct {
	mock *MockStoragesFactory
}

// NewMockStoragesFactory creates a new mock instance.
func NewMockStoragesFactory(ctrl *gomock.Controller) *MockStoragesFactory {
	mock := &MockStoragesFactory{ctrl: ctrl}
	mock.recorder = &MockStoragesFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoragesFactory) EXPECT() *MockStoragesFactoryMockRecorder {
	return m.recorder
}

// CreateDataKeeperStorage mocks base method.
func (m *MockStoragesFactory) CreateDataKeeperStorage() DataKeeperStorage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataKeeperStorage")
	ret0, _ := ret[0].(DataKeeperStorage)
	return ret0
}

// CreateDataKeeperStorage indicates an expected call of CreateDataKeeperStorage.
func (mr *MockStoragesFactoryMockRecorder) CreateDataKeeperStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataKeeperStorage", reflect.TypeOf((*MockStoragesFactory)(nil).CreateDataKeeperStorage))
}

// CreateUserStorage mocks base method.
func (m *MockStoragesFactory) CreateUserStorage() UserStorage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserStorage")
	ret0, _ := ret[0].(UserStorage)
	return ret0
}

// CreateUserStorage indicates an expected call of CreateUserStorage.
func (mr *MockStoragesFactoryMockRecorder) CreateUserStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserStorage", reflect.TypeOf((*MockStoragesFactory)(nil).CreateUserStorage))
}

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserStorage) CreateUser(ctx context.Context, login string, password []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserStorageMockRecorder) CreateUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserStorage)(nil).CreateUser), ctx, login, password)
}

// GetUser mocks base method.
func (m *MockUserStorage) GetUser(ctx context.Context, login string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, login)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserStorageMockRecorder) GetUser(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserStorage)(nil).GetUser), ctx, login)
}

// MockDataKeeperStorage is a mock of DataKeeperStorage interface.
type MockDataKeeperStorage struct {
	ctrl     *gomock.Controller
	recorder *MockDataKeeperStorageMockRecorder
}

// MockDataKeeperStorageMockRecorder is the mock recorder for MockDataKeeperStorage.
type MockDataKeeperStorageMockRecorder struct {
	mock *MockDataKeeperStorage
}

// NewMockDataKeeperStorage creates a new mock instance.
func NewMockDataKeeperStorage(ctrl *gomock.Controller) *MockDataKeeperStorage {
	mock := &MockDataKeeperStorage{ctrl: ctrl}
	mock.recorder = &MockDataKeeperStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataKeeperStorage) EXPECT() *MockDataKeeperStorageMockRecorder {
	return m.recorder
}

// CreateBin mocks base method.
func (m *MockDataKeeperStorage) CreateBin(ctx context.Context, userID int, name string, data []byte, description *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBin", ctx, userID, name, data, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBin indicates an expected call of CreateBin.
func (mr *MockDataKeeperStorageMockRecorder) CreateBin(ctx, userID, name, data, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBin", reflect.TypeOf((*MockDataKeeperStorage)(nil).CreateBin), ctx, userID, name, data, description)
}

// CreateCard mocks base method.
func (m *MockDataKeeperStorage) CreateCard(ctx context.Context, params CreateCardParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockDataKeeperStorageMockRecorder) CreateCard(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockDataKeeperStorage)(nil).CreateCard), ctx, params)
}

// CreatePasswordPair mocks base method.
func (m *MockDataKeeperStorage) CreatePasswordPair(ctx context.Context, userID int, login, password string, description *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePasswordPair", ctx, userID, login, password, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePasswordPair indicates an expected call of CreatePasswordPair.
func (mr *MockDataKeeperStorageMockRecorder) CreatePasswordPair(ctx, userID, login, password, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePasswordPair", reflect.TypeOf((*MockDataKeeperStorage)(nil).CreatePasswordPair), ctx, userID, login, password, description)
}

// CreateText mocks base method.
func (m *MockDataKeeperStorage) CreateText(ctx context.Context, userID int, name, text string, description *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateText", ctx, userID, name, text, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateText indicates an expected call of CreateText.
func (mr *MockDataKeeperStorageMockRecorder) CreateText(ctx, userID, name, text, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateText", reflect.TypeOf((*MockDataKeeperStorage)(nil).CreateText), ctx, userID, name, text, description)
}

// GetAllBins mocks base method.
func (m *MockDataKeeperStorage) GetAllBins(ctx context.Context, userID int) ([]Bin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBins", ctx, userID)
	ret0, _ := ret[0].([]Bin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBins indicates an expected call of GetAllBins.
func (mr *MockDataKeeperStorageMockRecorder) GetAllBins(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBins", reflect.TypeOf((*MockDataKeeperStorage)(nil).GetAllBins), ctx, userID)
}

// GetAllCards mocks base method.
func (m *MockDataKeeperStorage) GetAllCards(ctx context.Context, userID int) ([]Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCards", ctx, userID)
	ret0, _ := ret[0].([]Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCards indicates an expected call of GetAllCards.
func (mr *MockDataKeeperStorageMockRecorder) GetAllCards(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCards", reflect.TypeOf((*MockDataKeeperStorage)(nil).GetAllCards), ctx, userID)
}

// GetAllPasswordPairs mocks base method.
func (m *MockDataKeeperStorage) GetAllPasswordPairs(ctx context.Context, userID int) ([]PasswordPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPasswordPairs", ctx, userID)
	ret0, _ := ret[0].([]PasswordPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPasswordPairs indicates an expected call of GetAllPasswordPairs.
func (mr *MockDataKeeperStorageMockRecorder) GetAllPasswordPairs(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPasswordPairs", reflect.TypeOf((*MockDataKeeperStorage)(nil).GetAllPasswordPairs), ctx, userID)
}

// GetAllTexts mocks base method.
func (m *MockDataKeeperStorage) GetAllTexts(ctx context.Context, userID int) ([]Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTexts", ctx, userID)
	ret0, _ := ret[0].([]Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTexts indicates an expected call of GetAllTexts.
func (mr *MockDataKeeperStorageMockRecorder) GetAllTexts(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTexts", reflect.TypeOf((*MockDataKeeperStorage)(nil).GetAllTexts), ctx, userID)
}

// RemoveBin mocks base method.
func (m *MockDataKeeperStorage) RemoveBin(ctx context.Context, userID, ID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBin", ctx, userID, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBin indicates an expected call of RemoveBin.
func (mr *MockDataKeeperStorageMockRecorder) RemoveBin(ctx, userID, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBin", reflect.TypeOf((*MockDataKeeperStorage)(nil).RemoveBin), ctx, userID, ID)
}

// RemoveCard mocks base method.
func (m *MockDataKeeperStorage) RemoveCard(ctx context.Context, userID, ID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCard", ctx, userID, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCard indicates an expected call of RemoveCard.
func (mr *MockDataKeeperStorageMockRecorder) RemoveCard(ctx, userID, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCard", reflect.TypeOf((*MockDataKeeperStorage)(nil).RemoveCard), ctx, userID, ID)
}

// RemovePasswordPair mocks base method.
func (m *MockDataKeeperStorage) RemovePasswordPair(ctx context.Context, userID, ID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePasswordPair", ctx, userID, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePasswordPair indicates an expected call of RemovePasswordPair.
func (mr *MockDataKeeperStorageMockRecorder) RemovePasswordPair(ctx, userID, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePasswordPair", reflect.TypeOf((*MockDataKeeperStorage)(nil).RemovePasswordPair), ctx, userID, ID)
}

// RemoveText mocks base method.
func (m *MockDataKeeperStorage) RemoveText(ctx context.Context, userID, ID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveText", ctx, userID, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveText indicates an expected call of RemoveText.
func (mr *MockDataKeeperStorageMockRecorder) RemoveText(ctx, userID, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveText", reflect.TypeOf((*MockDataKeeperStorage)(nil).RemoveText), ctx, userID, ID)
}
